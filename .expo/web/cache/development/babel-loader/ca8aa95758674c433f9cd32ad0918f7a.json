{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nvar _jsxFileName = \"E:\\\\reactproj\\\\abc_medo1\\\\frontend\\\\src\\\\screens\\\\ProfileScreen.js\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { useRoute } from \"@react-navigation/native\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { USER_UPDATE_PROFILE_RESET } from \"../constants/userConstants\";\nimport { getUserDetails, updateUserProfile } from \"../actions/userActions\";\nimport { listMyOrders } from \"../actions/orderActions\";\nexport default function ProfileScreen(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var navigation = useNavigation();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      confirmPassword = _useState8[0],\n      setConfirmPassword = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      message = _useState10[0],\n      setMessage = _useState10[1];\n\n  var dispatch = useDispatch();\n  var userDetails = useSelector(function (state) {\n    return state.userDetails;\n  });\n  var loading = userDetails.loading,\n      error = userDetails.error,\n      user = userDetails.user;\n  var userLogin = useSelector(function (state) {\n    return state.userLogin;\n  });\n  var userInfo = userLogin.userInfo;\n  var userUpdateProfile = useSelector(function (state) {\n    return state.userUpdateProfile;\n  });\n  var success = userUpdateProfile.success;\n  useEffect(function () {\n    if (!userInfo) {\n      navigation.navigate(\"SignIn\");\n    } else {\n      if (!user || !user.name || success) {\n        dispatch({\n          type: USER_UPDATE_PROFILE_RESET\n        });\n        dispatch(getUserDetails('profile'));\n        dispatch(listMyOrders);\n      } else {\n        setName(user.name);\n        setEmail(user.email);\n      }\n    }\n  }, [dispatch, navigation, userInfo, user, success]);\n\n  var submitHandler = function submitHandler(e) {\n    if (password !== confirmPassword) {\n      setMessage('Password and confirmPassword do not match');\n    } else {\n      dispatch(updateUserProfile({\n        id: user._id,\n        name: name,\n        email: email,\n        password: password\n      }));\n    }\n  };\n\n  return React.createElement(ScrollView, {\n    style: {\n      backgroundColor: \"black\",\n      paddingTop: 40\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, \"User Profile\"), message && React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 26\n    }\n  }, message), success && React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 26\n    }\n  }, \"Profile Updated\"));\n}\nvar styles = StyleSheet.create({\n  container: {\n    padding: 20,\n    alignItems: \"center\"\n  },\n  pageImage: {\n    textAlign: \"left\",\n    width: 400,\n    height: 500,\n    resizeMode: 'contain',\n    paddingRight: 20,\n    margin: 0\n  },\n  button: {\n    width: 390,\n    height: 45,\n    margin: 0,\n    padding: 0,\n    borderRadius: 5,\n    backgroundColor: \"tomato\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 50\n  },\n  image: {\n    height: 140,\n    width: 140,\n    borderRadius: 70,\n    borderWidth: 2,\n    borderColor: \"#F35960\"\n  },\n  textInput: {\n    borderBottomColor: \"#F35960\",\n    borderBottomWidth: 1,\n    height: 45,\n    width: \"80%\",\n    paddingLeft: 15,\n    marginVertical: 20,\n    marginHorizontal: \"10%\"\n  },\n  textArea: {\n    borderWidth: 1,\n    borderColor: \"#F35960\",\n    width: \"80%\",\n    height: 80,\n    paddingHorizontal: 15,\n    paddingTop: 15,\n    textAlignVertical: \"top\",\n    marginBottom: 20,\n    marginHorizontal: \"10%\",\n    borderRadius: 5\n  },\n  updateButton: {\n    width: 150,\n    height: 55,\n    borderRadius: 50,\n    borderWidth: 1,\n    borderColor: \"#F35960\",\n    backgroundColor: \"white\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 30\n  },\n  logoutButton: {\n    width: 150,\n    height: 55,\n    borderRadius: 50,\n    backgroundColor: \"#F35960\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 30\n  },\n  logoutButtonText: {\n    color: \"white\"\n  },\n  updateButtonText: {\n    color: \"#F35960\"\n  }\n});","map":{"version":3,"sources":["E:/reactproj/abc_medo1/frontend/src/screens/ProfileScreen.js"],"names":["React","useEffect","useState","useCallback","useRoute","useNavigation","AsyncStorage","useDispatch","useSelector","USER_UPDATE_PROFILE_RESET","getUserDetails","updateUserProfile","listMyOrders","ProfileScreen","navigation","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","dispatch","userDetails","state","loading","error","user","userLogin","userInfo","userUpdateProfile","success","navigate","type","submitHandler","e","id","_id","backgroundColor","paddingTop","color","styles","StyleSheet","create","container","padding","alignItems","pageImage","textAlign","width","height","resizeMode","paddingRight","margin","button","borderRadius","justifyContent","marginTop","image","borderWidth","borderColor","textInput","borderBottomColor","borderBottomWidth","paddingLeft","marginVertical","marginHorizontal","textArea","paddingHorizontal","textAlignVertical","marginBottom","updateButton","logoutButton","logoutButtonText","updateButtonText"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { useRoute } from \"@react-navigation/native\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport {\r\n    Text,\r\n    View,\r\n    TouchableOpacity,\r\n    AsyncStorage,\r\n    Image,\r\n    ActivityIndicator,\r\n    StyleSheet,\r\n    ScrollView,\r\n    TextInput,\r\n    Button\r\n} from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { USER_UPDATE_PROFILE_RESET } from \"../constants/userConstants\";\r\nimport { getUserDetails, updateUserProfile } from \"../actions/userActions\";\r\nimport { listMyOrders } from \"../actions/orderActions\";\r\n\r\n\r\nexport default function ProfileScreen({  }) {\r\n    const navigation = useNavigation();\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector((state) => state.userDetails)\r\n    const { loading, error, user } = userDetails\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdateProfile = useSelector((state) => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    //const orderListMy = useSelector((state) => state.orderUpdateProfile)\r\n    //const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n    useEffect(() => {\r\n            if(!userInfo) {\r\n                navigation.navigate(\"SignIn\")\r\n            }else{\r\n                if(!user || !user.name || success){\r\n                    dispatch({ type: USER_UPDATE_PROFILE_RESET})\r\n                    dispatch(getUserDetails('profile'))\r\n                    dispatch(listMyOrders)\r\n                }else{\r\n                    setName(user.name)\r\n                    setEmail(user.email)\r\n                }\r\n            }\r\n        },[dispatch, navigation, userInfo, user, success])\r\n    const submitHandler = (e) => {\r\n        if (password !== confirmPassword){\r\n            setMessage('Password and confirmPassword do not match')\r\n        } else {\r\n            dispatch(updateUserProfile({\r\n                id: user._id,\r\n                name:name,\r\n                email:email,\r\n                password:password\r\n            }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ScrollView style={{backgroundColor:\"black\",paddingTop:40}}>\r\n            <Text style={{color:\"white\"}}>User Profile</Text>\r\n            { message && <Text>{message}</Text> }\r\n            { success && <Text>Profile Updated</Text> }\r\n            {}\r\n\r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        padding: 20,\r\n        alignItems: \"center\"\r\n        // flex: 1\r\n    },\r\n    pageImage: {\r\n        //flex: 1,\r\n        textAlign:\"left\",\r\n        width: 400,\r\n        height: 500,\r\n        resizeMode: 'contain',\r\n        paddingRight: 20,\r\n        margin: 0\r\n    },\r\n    button: {\r\n        width: 390,\r\n        height: 45,\r\n        margin: 0,\r\n        padding: 0,\r\n        borderRadius: 5,\r\n        backgroundColor: \"tomato\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        marginTop: 50\r\n    },\r\n    image: {\r\n        height: 140,\r\n        width: 140,\r\n        borderRadius: 70,\r\n        borderWidth: 2,\r\n        borderColor: \"#F35960\"\r\n    },\r\n    textInput: {\r\n        borderBottomColor: \"#F35960\",\r\n        borderBottomWidth: 1,\r\n        height: 45,\r\n        width: \"80%\",\r\n        paddingLeft: 15,\r\n        marginVertical: 20,\r\n        marginHorizontal: \"10%\"\r\n    },\r\n    textArea: {\r\n        borderWidth: 1,\r\n        borderColor: \"#F35960\",\r\n        width: \"80%\",\r\n        height: 80,\r\n        paddingHorizontal: 15,\r\n        paddingTop: 15,\r\n        textAlignVertical: \"top\",\r\n        marginBottom: 20,\r\n        marginHorizontal: \"10%\",\r\n        borderRadius: 5\r\n    },\r\n    updateButton: {\r\n        width: 150,\r\n        height: 55,\r\n        borderRadius: 50,\r\n        borderWidth: 1,\r\n        borderColor: \"#F35960\",\r\n        backgroundColor: \"white\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        marginTop: 30\r\n    },\r\n    logoutButton: {\r\n        width: 150,\r\n        height: 55,\r\n        borderRadius: 50,\r\n        backgroundColor: \"#F35960\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        marginTop: 30\r\n    },\r\n    logoutButtonText: {\r\n        color: \"white\"\r\n    },\r\n    updateButtonText: {\r\n        color: \"#F35960\"\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}