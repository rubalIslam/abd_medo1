{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_DETAILS_RESET, USER_LIST_FAIL, USER_LIST_SUCCESS, USER_LIST_REQUEST, USER_LIST_RESET, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAIL, USER_UPDATE_FAIL, USER_UPDATE_SUCCESS, USER_UPDATE_REQUEST } from \"../constants/userConstants\";\nimport { ORDER_LIST_MY_RESET } from \"../constants/orderConstants\";\nimport baseURL from \"../../assets/common/baseUrl\";\nimport * as SecureStore from 'expo-secure-store';\nexport var login = function login(email, password) {\n  return function _callee(dispatch) {\n    var config, _await$axios$post, data;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            dispatch({\n              type: USER_LOGIN_REQUEST\n            });\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(axios.post('${baseURL}users/login', {\n              email: email,\n              password: password\n            }, config));\n\n          case 5:\n            _await$axios$post = _context.sent;\n            data = _await$axios$post.data;\n            dispatch({\n              type: USER_LOGIN_SUCCESS,\n              payload: data\n            });\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(SecureStore.setItemAsync('userInfo', JSON.stringify(data)));\n\n          case 10:\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch({\n              type: USER_LOGIN_FAIL,\n              payload: _context.t0.response && _context.t0.response.data.message ? _context.t0.response.data.message : _context.t0.message\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n};\nexport var logout = function logout() {\n  return function (dispatch) {\n    localStorage.removeItem('userInfo');\n    dispatch({\n      type: USER_LOGOUT\n    });\n    dispatch({\n      type: USER_DETAILS_RESET\n    });\n    dispatch({\n      type: ORDER_LIST_MY_RESET\n    });\n    dispatch({\n      type: USER_LIST_RESET\n    });\n  };\n};\nexport var register = function register(name, email, password) {\n  return function _callee2(dispatch) {\n    var config, _await$axios$post2, data;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            dispatch({\n              type: USER_REGISTER_REQUEST\n            });\n            config = {\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(axios.post('${baseURL}users', {\n              name: name,\n              email: email,\n              password: password\n            }, config));\n\n          case 5:\n            _await$axios$post2 = _context2.sent;\n            data = _await$axios$post2.data;\n            dispatch({\n              type: USER_REGISTER_SUCCESS,\n              payload: data\n            });\n            dispatch({\n              type: USER_LOGIN_SUCCESS,\n              payload: data\n            });\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(SecureStore.setItemAsync('userInfo', JSON.stringify(data)));\n\n          case 11:\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch({\n              type: USER_REGISTER_FAIL,\n              payload: _context2.t0.response && _context2.t0.response.data.message ? _context2.t0.response.data.message : _context2.t0.message\n            });\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n};\nexport var getUserDetails = function getUserDetails(id) {\n  return function _callee3(dispatch, getState) {\n    var _getState, userInfo, config, _await$axios$get, data, message;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            dispatch({\n              type: USER_DETAILS_REQUEST\n            });\n            _getState = getState(), userInfo = _getState.userLogin.userInfo;\n            config = {\n              headers: {\n                Authorization: \"Bearer \" + userInfo.token\n              }\n            };\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(axios.get(baseURL + \"users/\" + id, config));\n\n          case 6:\n            _await$axios$get = _context3.sent;\n            data = _await$axios$get.data;\n            dispatch({\n              type: USER_DETAILS_SUCCESS,\n              payload: data\n            });\n            _context3.next = 16;\n            break;\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](0);\n            message = _context3.t0.response && _context3.t0.response.data.message ? _context3.t0.response.data.message : _context3.t0.message;\n\n            if (message === 'Not authorized, token failed') {\n              dispatch(logout());\n            }\n\n            dispatch({\n              type: USER_DETAILS_FAIL,\n              payload: message\n            });\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n};\nexport var updateUserProfile = function updateUserProfile(user) {\n  return function _callee4(dispatch, getState) {\n    var _getState2, userInfo, config, _await$axios$put, data, message;\n\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            dispatch({\n              type: USER_UPDATE_PROFILE_REQUEST\n            });\n            _getState2 = getState(), userInfo = _getState2.userLogin.userInfo;\n            config = {\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: \"Bearer \" + userInfo.token\n              }\n            };\n            _context4.next = 6;\n            return _regeneratorRuntime.awrap(axios.put(baseURL + \"users/profile\", user, config));\n\n          case 6:\n            _await$axios$put = _context4.sent;\n            data = _await$axios$put.data;\n            dispatch({\n              type: USER_UPDATE_PROFILE_SUCCESS,\n              payload: data\n            });\n            dispatch({\n              type: USER_LOGIN_SUCCESS,\n              payload: data\n            });\n            localStorage.setItem('userInfo', JSON.stringify(data));\n            _context4.next = 18;\n            break;\n\n          case 13:\n            _context4.prev = 13;\n            _context4.t0 = _context4[\"catch\"](0);\n            message = _context4.t0.response && _context4.t0.response.data.message ? _context4.t0.response.data.message : _context4.t0.message;\n\n            if (message === 'Not authorized, token failed') {\n              dispatch(logout());\n            }\n\n            dispatch({\n              type: USER_UPDATE_PROFILE_FAIL,\n              payload: message\n            });\n\n          case 18:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n};\nexport var listUsers = function listUsers() {\n  return function _callee5(dispatch, getState) {\n    var _getState3, userInfo, config, _await$axios$get2, data, message;\n\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            dispatch({\n              type: USER_LIST_REQUEST\n            });\n            _getState3 = getState(), userInfo = _getState3.userLogin.userInfo;\n            config = {\n              headers: {\n                Authorization: \"Bearer \" + userInfo.token\n              }\n            };\n            _context5.next = 6;\n            return _regeneratorRuntime.awrap(axios.get(baseURL + \"users\", config));\n\n          case 6:\n            _await$axios$get2 = _context5.sent;\n            data = _await$axios$get2.data;\n            dispatch({\n              type: USER_LIST_SUCCESS,\n              payload: data\n            });\n            _context5.next = 16;\n            break;\n\n          case 11:\n            _context5.prev = 11;\n            _context5.t0 = _context5[\"catch\"](0);\n            message = _context5.t0.response && _context5.t0.response.data.message ? _context5.t0.response.data.message : _context5.t0.message;\n\n            if (message === 'Not authorized, token failed') {\n              dispatch(logout());\n            }\n\n            dispatch({\n              type: USER_LIST_FAIL,\n              payload: message\n            });\n\n          case 16:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n};\nexport var deleteUser = function deleteUser(id) {\n  return function _callee6(dispatch, getState) {\n    var _getState4, userInfo, config, message;\n\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            dispatch({\n              type: USER_DELETE_REQUEST\n            });\n            _getState4 = getState(), userInfo = _getState4.userLogin.userInfo;\n            config = {\n              headers: {\n                Authorization: \"Bearer \" + userInfo.token\n              }\n            };\n            _context6.next = 6;\n            return _regeneratorRuntime.awrap(axios.delete(baseURL + \"users/\" + id, config));\n\n          case 6:\n            dispatch({\n              type: USER_DELETE_SUCCESS\n            });\n            _context6.next = 14;\n            break;\n\n          case 9:\n            _context6.prev = 9;\n            _context6.t0 = _context6[\"catch\"](0);\n            message = _context6.t0.response && _context6.t0.response.data.message ? _context6.t0.response.data.message : _context6.t0.message;\n\n            if (message === 'Not authorized, token failed') {\n              dispatch(logout());\n            }\n\n            dispatch({\n              type: USER_DELETE_FAIL,\n              payload: message\n            });\n\n          case 14:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n};\nexport var updateUser = function updateUser(user) {\n  return function _callee7(dispatch, getState) {\n    var _getState5, userInfo, config, _await$axios$put2, data, message;\n\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            dispatch({\n              type: USER_UPDATE_REQUEST\n            });\n            _getState5 = getState(), userInfo = _getState5.userLogin.userInfo;\n            config = {\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: \"Bearer \" + userInfo.token\n              }\n            };\n            _context7.next = 6;\n            return _regeneratorRuntime.awrap(axios.put(baseURL + \"users/\" + user._id, user, config));\n\n          case 6:\n            _await$axios$put2 = _context7.sent;\n            data = _await$axios$put2.data;\n            dispatch({\n              type: USER_UPDATE_SUCCESS\n            });\n            dispatch({\n              type: USER_DETAILS_SUCCESS,\n              payload: data\n            });\n            _context7.next = 17;\n            break;\n\n          case 12:\n            _context7.prev = 12;\n            _context7.t0 = _context7[\"catch\"](0);\n            message = _context7.t0.response && _context7.t0.response.data.message ? _context7.t0.response.data.message : _context7.t0.message;\n\n            if (message === 'Not authorized, token failed') {\n              dispatch(logout());\n            }\n\n            dispatch({\n              type: USER_UPDATE_FAIL,\n              payload: message\n            });\n\n          case 17:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n};","map":{"version":3,"sources":["E:/reactproj/abc_medo1/frontend/src/actions/userActions.js"],"names":["axios","USER_DETAILS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_DETAILS_RESET","USER_LIST_FAIL","USER_LIST_SUCCESS","USER_LIST_REQUEST","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","USER_UPDATE_FAIL","USER_UPDATE_SUCCESS","USER_UPDATE_REQUEST","ORDER_LIST_MY_RESET","baseURL","SecureStore","login","email","password","dispatch","type","config","headers","post","data","payload","setItemAsync","JSON","stringify","response","message","logout","localStorage","removeItem","register","name","getUserDetails","id","getState","userInfo","userLogin","Authorization","token","get","updateUserProfile","user","put","setItem","listUsers","deleteUser","delete","updateUser","_id"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n  USER_DETAILS_FAIL,\n  USER_DETAILS_REQUEST,\n  USER_DETAILS_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGOUT,\n  USER_REGISTER_FAIL,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS,\n  USER_UPDATE_PROFILE_FAIL,\n  USER_UPDATE_PROFILE_REQUEST,\n  USER_UPDATE_PROFILE_SUCCESS,\n  USER_DETAILS_RESET,\n  USER_LIST_FAIL,\n  USER_LIST_SUCCESS,\n  USER_LIST_REQUEST,\n  USER_LIST_RESET,\n  USER_DELETE_REQUEST,\n  USER_DELETE_SUCCESS,\n  USER_DELETE_FAIL,\n  USER_UPDATE_FAIL,\n  USER_UPDATE_SUCCESS,\n  USER_UPDATE_REQUEST,\n} from '../constants/userConstants'\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\nimport baseURL from \"../../assets/common/baseUrl\";\nimport * as SecureStore from 'expo-secure-store';\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST,\n    })\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n\n    const { data } = await axios.post(\n      '${baseURL}users/login',\n      { email, password },\n      config\n    )\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    })\n\n    //localStorage.setItem('userInfo', JSON.stringify(data))\n    await SecureStore.setItemAsync('userInfo', JSON.stringify(data))\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const logout = () => (dispatch) => {\n  localStorage.removeItem('userInfo')\n  dispatch({ type: USER_LOGOUT })\n  dispatch({ type: USER_DETAILS_RESET })\n  dispatch({ type: ORDER_LIST_MY_RESET })\n  dispatch({ type: USER_LIST_RESET })\n}\n\nexport const register = (name, email, password) => async (dispatch) => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST,\n    })\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }\n\n    const { data } = await axios.post(\n      '${baseURL}users',\n      { name, email, password },\n      config\n    )\n\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data,\n    })\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    })\n\n    //localStorage.setItem('userInfo', JSON.stringify(data))\n    await SecureStore.setItemAsync('userInfo', JSON.stringify(data))\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.get(`${baseURL}users/${id}`, config)\n\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: message,\n    })\n  }\n}\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.put(`${baseURL}users/profile`, user, config)\n\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data,\n    })\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data,\n    })\n    localStorage.setItem('userInfo', JSON.stringify(data))\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: message,\n    })\n  }\n}\n\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.get(`${baseURL}users`, config)\n\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: message,\n    })\n  }\n}\n\nexport const deleteUser = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    await axios.delete(`${baseURL}users/${id}`, config)\n\n    dispatch({ type: USER_DELETE_SUCCESS })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: message,\n    })\n  }\n}\n\nexport const updateUser = (user) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.put(`${baseURL}users/${user._id}`, user, config)\n\n    dispatch({ type: USER_UPDATE_SUCCESS })\n\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout())\n    }\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: message,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}