{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\reactproj\\\\abc_medo1\\\\frontend\\\\src\\\\MyApp.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { connect } from 'react-redux';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport * as SecureStore from 'expo-secure-store';\nimport AuthScreen from \"./components/auth\";\nimport { ActionSheetProvider } from \"@expo/react-native-action-sheet\";\nimport VideoScreen from \"./components/home/videos\";\nimport HomeScreen from \"./components/home/articles\";\nvar Drawer = createDrawerNavigator();\nvar Tab = createBottomTabNavigator();\nvar Stack = createStackNavigator();\n\nvar MyApp = function MyApp() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userInfo = _useState4[0],\n      setUserInfo = _useState4[1];\n\n  useEffect(function () {\n    var bootstrapAsync = function bootstrapAsync() {\n      var userInfo;\n      return _regeneratorRuntime.async(function bootstrapAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(SecureStore.getItemAsync(\"userInfo\"));\n\n            case 2:\n              userInfo = _context.sent;\n              console.log(userInfo);\n              setIsLoading(false);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    bootstrapAsync();\n  }, []);\n\n  var _useState5 = useState(\"true\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      auth = _useState6[0],\n      setAuth = _useState6[1];\n\n  return React.createElement(Stack.Navigator, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, auth == \"true\" ? React.createElement(React.Fragment, null, React.createElement(Stack.Screen, {\n    name: \"Main\",\n    component: MainDrawer,\n    options: {\n      headerShown: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }\n  })) : React.createElement(Stack.Screen, {\n    options: {\n      headerShown: false\n    },\n    name: \"AuthScreen\",\n    component: AuthScreen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth\n  };\n};\n\nexport default connect(mapStateToProps)(MyApp);","map":{"version":3,"sources":["E:/reactproj/abc_medo1/frontend/src/MyApp.js"],"names":["React","Component","useState","connect","NavigationContainer","createStackNavigator","createDrawerNavigator","createBottomTabNavigator","Ionicons","SecureStore","AuthScreen","ActionSheetProvider","VideoScreen","HomeScreen","Drawer","Tab","Stack","MyApp","isLoading","setIsLoading","userInfo","setUserInfo","useEffect","bootstrapAsync","getItemAsync","console","log","auth","setAuth","MainDrawer","headerShown","mapStateToProps","state"],"mappings":";;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAOC,UAAP;AAGA,SAASC,mBAAT,QAAoC,iCAApC;AAEA,OAAOC,WAAP;AACA,OAAOC,UAAP;AAGA,IAAMC,MAAM,GAAGR,qBAAqB,EAApC;AACA,IAAMS,GAAG,GAAGR,wBAAwB,EAApC;AACA,IAAMS,KAAK,GAAGX,oBAAoB,EAAlC;;AAWA,IAAMY,KAAK,GAAG,SAARA,KAAQ,GAAM;AAAA,kBAEoBf,QAAQ,CAAC,IAAD,CAF5B;AAAA;AAAA,MAERgB,SAFQ;AAAA,MAEGC,YAFH;;AAAA,mBAGgBjB,QAAQ,CAAC,IAAD,CAHxB;AAAA;AAAA,MAGTkB,QAHS;AAAA,MAGCC,WAHD;;AAKhBC,EAAAA,SAAS,CAAC,YAAM;AAEZ,QAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEEd,WAAW,CAACe,YAAZ,CAAyB,UAAzB,CAFF;;AAAA;AAEfJ,cAAAA,QAFe;AAGrBK,cAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AASAD,cAAAA,YAAY,CAAC,KAAD,CAAZ;;AAZqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvB;;AAoBAI,IAAAA,cAAc;AACf,GAvBM,EAuBJ,EAvBI,CAAT;;AALgB,mBA8BSrB,QAAQ,CAAC,MAAD,CA9BjB;AAAA;AAAA,MA8BTyB,IA9BS;AAAA,MA8BHC,OA9BG;;AAgCZ,SAEI,oBAAC,KAAD,CAAO,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQD,IAAI,IAAI,MAAR,GACI,0CACI,oBAAC,KAAD,CAAO,MAAP;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,SAAS,EAAEE,UAFf;AAGI,IAAA,OAAO,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,GASQ,oBAAC,KAAD,CAAO,MAAP;AACI,IAAA,OAAO,EAAE;AAAEA,MAAAA,WAAW,EAAE;AAAf,KADb;AAEI,IAAA,IAAI,EAAC,YAFT;AAGI,IAAA,SAAS,EAAEpB,UAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXhB,CAFJ;AAuBP,CAvDD;;AAyDA,IAAMqB,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAAEL,IAAAA,IAAI,EAAEK,KAAK,CAACL;AAAd,GAAL;AAAA,CAA7B;;AACA,eAAexB,OAAO,CAAC4B,eAAD,CAAP,CAAyBd,KAAzB,CAAf","sourcesContent":["//import 'react-native-gesture-handler';\r\nimport React, { Component, useState } from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { connect } from 'react-redux';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { createDrawerNavigator } from '@react-navigation/drawer';\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport * as SecureStore from 'expo-secure-store';\r\nimport AuthScreen from './components/auth';\r\n//import ProfileScreen from './components/user/profile/profile';\r\n//import { Stack, HomeStack, VideosStack, screenOptions } from './routes/stacks';\r\nimport { ActionSheetProvider } from \"@expo/react-native-action-sheet\";\r\n\r\nimport VideoScreen from './components/home/videos';\r\nimport HomeScreen from './components/home/articles';\r\n\r\n\r\nconst Drawer = createDrawerNavigator();\r\nconst Tab = createBottomTabNavigator();\r\nconst Stack = createStackNavigator();\r\n/*\r\nconst MainDrawer = () => (\r\n    <Drawer.Navigator\r\n    >\r\n        <Drawer.Screen name=\"Home\" component={HomeStack}/>\r\n        <Drawer.Screen name=\"Videos\" component={VideosStack}/>\r\n   \r\n    </Drawer.Navigator>\r\n)\r\n*/\r\nconst MyApp = () => {\r\n\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n    const [userInfo, setUserInfo] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Fetch the token from storage then navigate to our appropriate place\r\n        const bootstrapAsync = async () => {\r\n          // We should also handle error for production apps\r\n          const userInfo = await SecureStore.getItemAsync(\"userInfo\");\r\n          console.log(userInfo);\r\n          //const userToken = await SecureStore.getItemAsync(\"userToken\");\r\n          //const adminToken = await SecureStore.getItemAsync(\"adminToken\");\r\n          //const userId = await SecureStore.getItemAsync(\"userId\");\r\n          //const adminId = await SecureStore.getItemAsync(\"adminId\");\r\n          //const name = await SecureStore.getItemAsync(\"name\");\r\n    \r\n          // This will switch to the App screen or Auth screen and this loading\r\n          // screen will be unmounted and thrown away.\r\n          setIsLoading(false);\r\n          //setUserToken(userToken);\r\n          //setadminToken(adminToken);\r\n          //setName(name);\r\n          //setUserId(userId);\r\n          //setadminId(adminId);\r\n        };\r\n    \r\n        bootstrapAsync();\r\n      }, []);\r\n   \r\n    const [auth, setAuth ] = useState(\"true\")\r\n\r\n        return (\r\n\r\n            <Stack.Navigator>\r\n                {\r\n                    auth == \"true\" ? (\r\n                        <>\r\n                            <Stack.Screen\r\n                                name=\"Main\"\r\n                                component={MainDrawer}\r\n                                options={{ headerShown: false }}\r\n                            />\r\n                        </>\r\n                    ) : (\r\n                            <Stack.Screen\r\n                                options={{ headerShown: false }}\r\n                                name=\"AuthScreen\"\r\n                                component={AuthScreen}\r\n                            />\r\n\r\n                        )\r\n                }\r\n            </Stack.Navigator>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = state => ({ auth: state.auth })\r\nexport default connect(mapStateToProps)(MyApp);\r\n\r\n"]},"metadata":{},"sourceType":"module"}