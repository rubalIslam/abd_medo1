{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\reactproj\\\\abc_medo1\\\\frontend\\\\src\\\\components\\\\auth\\\\index.js\";\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { Input, Button } from 'react-native-elements';\n\nvar AuthScreen = function AuthScreen() {\n  var dispatch = useDispatch();\n  var error = useSelector(function (state) {\n    return state.auth.error;\n  });\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      formType = _useState2[0],\n      setFormType = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      securEntry = _useState4[0],\n      setSecurEntry = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var handleSubmit = function handleSubmit(values) {\n    setLoading(true);\n\n    if (formType) {\n      dispatch(registerUser(values));\n    } else {\n      dispatch(loginUser(values));\n    }\n  };\n\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    contentContainerStyle: styles.contentContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, React.createElement(Formik, {\n    initialValues: {\n      email: 'mail@gmail.com',\n      password: 'mail123'\n    },\n    validationSchema: Yup.object({\n      email: Yup.string().email('Invalid email address').required('The email is required'),\n      password: Yup.string().max(20, 'Must be 10 or less').required('The lastname is required')\n    }),\n    onSubmit: function onSubmit(values) {\n      return handleSubmit(values);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }, function (_ref) {\n    var handleChange = _ref.handleChange,\n        handleBlur = _ref.handleBlur,\n        handleSubmit = _ref.handleSubmit,\n        values = _ref.values,\n        touched = _ref.touched,\n        errors = _ref.errors;\n    return React.createElement(React.Fragment, null, React.createElement(Input, {\n      placeholder: \"Email\",\n      leftIcon: {\n        type: 'antdesign',\n        name: 'mail',\n        color: \"white\"\n      },\n      inputStyle: styles.inputStyle,\n      placeholderTextColor: \"grey\",\n      inputContainerStyle: styles.inputContainerStyle,\n      renderErrorMessage: errors.email && touched.email,\n      errorMessage: errors.email,\n      errorStyle: {\n        color: \"black\"\n      },\n      onChangeText: handleChange('email'),\n      onBlur: handleBlur('email'),\n      value: values.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }), React.createElement(Input, {\n      placeholder: \"Password\",\n      secureTextEntry: securEntry,\n      leftIcon: {\n        type: 'antdesign',\n        name: 'lock',\n        color: \"white\"\n      },\n      inputStyle: styles.inputStyle,\n      placeholderTextColor: \"grey\",\n      inputContainerStyle: styles.inputContainerStyle,\n      rightIcon: {\n        type: 'antdesign',\n        name: securEntry ? 'eye' : 'eyeo',\n        onPress: function onPress() {\n          return setSecurEntry(!securEntry);\n        }\n      },\n      renderErrorMessage: errors.password && touched.password,\n      errorMessage: errors.password,\n      errorStyle: {\n        color: \"black\"\n      },\n      onChangeText: handleChange('password'),\n      onBlur: handleBlur('password'),\n      value: values.password,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }\n    }), React.createElement(Button, {\n      title: formType ? 'Register' : 'Login',\n      buttonStyle: {\n        backgroundColor: \"black\",\n        marginTop: 20\n      },\n      titleStyle: {\n        width: '100%'\n      },\n      onPress: handleSubmit,\n      loading: loading,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    }), React.createElement(Button, {\n      type: \"clear\",\n      title: \"\" + (!formType ? 'Already Registered?' : 'Need to sign in?'),\n      buttonStyle: {\n        marginTop: 20\n      },\n      titleStyle: {\n        width: '100%',\n        color: \"white\"\n      },\n      onPress: function onPress() {\n        return setFormType(!formType);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 26\n      }\n    }));\n  }))));\n};\n\nvar styles = StyleSheet.create({\n  contentContainer: {\n    flex: 1,\n    backgroundColor: \"tomato\"\n  },\n  container: {\n    padding: 50,\n    alignItems: 'center'\n  },\n  inputStyle: {\n    fontSize: 15,\n    color: \"white\"\n  },\n  inputContainerStyle: {\n    borderBottomWidth: 3,\n    borderBottomColor: \"black\"\n  }\n});\nexport default AuthScreen;","map":{"version":3,"sources":["E:/reactproj/abc_medo1/frontend/src/components/auth/index.js"],"names":["React","useState","useCallback","useEffect","Yup","useDispatch","useSelector","useFocusEffect","Input","Button","AuthScreen","dispatch","error","state","auth","formType","setFormType","securEntry","setSecurEntry","loading","setLoading","handleSubmit","values","registerUser","loginUser","styles","contentContainer","container","email","password","object","string","required","max","handleChange","handleBlur","touched","errors","type","name","color","inputStyle","inputContainerStyle","onPress","backgroundColor","marginTop","width","StyleSheet","create","flex","padding","alignItems","fontSize","borderBottomWidth","borderBottomColor"],"mappings":"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","sourcesContent":["import React,{ useState, useCallback, useEffect} from 'react';\nimport { View, StyleSheet, ScrollView,Text } from 'react-native';\n//import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\n//import { registerUser, loginUser,clearAuthError } from '../../store/actions';\nimport { useFocusEffect } from '@react-navigation/native'\n\nimport { Input, Button } from 'react-native-elements';\n\n\nconst AuthScreen = () =>{\n    const dispatch = useDispatch();\n/*\n    const [ email, setEmail ] = useState('')\n    const [ password, setPassword ] = useState('')\n    const userLogin = useSelector((state) => state.userLogin)\n    const { loading, error, userInfo } = userLogin\n*/\n    \n\n\n    const error = useSelector(state => state.auth.error )\n    const [formType, setFormType] = useState(true)\n    const [ securEntry,setSecurEntry] = useState(true);\n    const [loading, setLoading] = useState(false)\n\n    const handleSubmit = (values) => {\n        setLoading(true)\n        if(formType){\n            // register\n            dispatch(registerUser(values));\n        } else {\n            // sign in\n            dispatch(loginUser(values))\n        }\n    }\n\n    return (\n        <View>\n            <ScrollView contentContainerStyle={styles.contentContainer}>\n            <View style={styles.container}>\n                \n                <Formik\n                    initialValues={{ email:'mail@gmail.com',password:'mail123'}}\n                    validationSchema={Yup.object({\n                        email: Yup.string()\n                        .email('Invalid email address')\n                        .required('The email is required'),\n                        password:Yup.string()\n                        .max(20,'Must be 10 or less')\n                        .required('The lastname is required')\n                    })}\n                    onSubmit={ values => handleSubmit(values)}\n                >\n                { ({handleChange,handleBlur, handleSubmit, values,touched,errors})=>(\n                    <>\n                        <Input\n                            placeholder=\"Email\"\n                            leftIcon={{ type:'antdesign',name:'mail',color: \"white\"}}\n                            inputStyle={styles.inputStyle}\n                            placeholderTextColor={\"grey\"}\n                            inputContainerStyle={styles.inputContainerStyle}\n\n                            renderErrorMessage={errors.email && touched.email}\n                            errorMessage={errors.email}\n                            errorStyle={{ color: \"black\"}}\n\n                            onChangeText={handleChange('email')}\n                            onBlur={handleBlur('email')}\n                            value={values.email}\n                        />\n                        <Input\n                            placeholder=\"Password\"\n                            secureTextEntry={securEntry}\n                            leftIcon={{ type:'antdesign',name:'lock',color: \"white\"}}\n                            inputStyle={styles.inputStyle}\n                            placeholderTextColor={\"grey\"}\n                            inputContainerStyle={styles.inputContainerStyle}\n                            rightIcon={{\n                                type:'antdesign',\n                                name:securEntry ? 'eye':'eyeo',\n                                onPress:()=> setSecurEntry(!securEntry)\n                            }}\n\n                            renderErrorMessage={errors.password && touched.password}\n                            errorMessage={errors.password}\n                            errorStyle={{ color: \"black\"}}\n\n                            onChangeText={handleChange('password')}\n                            onBlur={handleBlur('password')}\n                            value={values.password}\n                        />\n                        <Button\n                            title={ formType ? 'Register':'Login'}\n                            buttonStyle={{\n                                backgroundColor: \"black\",\n                                marginTop:20\n                            }}\n                            titleStyle={{ width:'100%'}}\n                            onPress={handleSubmit}\n                            loading={loading}\n                        />\n                         <Button\n                            type=\"clear\"\n                            title={`${!formType ? 'Already Registered?':'Need to sign in?'}`}\n                            buttonStyle={{\n                                marginTop:20\n                            }}\n                            titleStyle={{ width:'100%', color:\"white\"}}\n                            onPress={()=> setFormType(!formType)}\n                    \n                        />\n\n                    </>\n                )}\n                </Formik>\n            </View>\n        </ScrollView>\n        </View>\n    )\n} \n\n\nconst styles = StyleSheet.create({\n    contentContainer:{\n        flex:1,\n        backgroundColor:\"tomato\"\n    },\n    container:{\n        padding:50,\n        alignItems:'center'\n    },\n    inputStyle:{\n        fontSize:15,\n        color:\"white\"\n    },\n    inputContainerStyle:{\n      borderBottomWidth:3,\n      borderBottomColor: \"black\"\n    }\n})\n\nexport default AuthScreen;"]},"metadata":{},"sourceType":"module"}