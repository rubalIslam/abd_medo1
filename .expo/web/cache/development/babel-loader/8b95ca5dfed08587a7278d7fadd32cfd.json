{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\reactproj\\\\abc_medo1\\\\frontend\\\\src\\\\MyApp.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component, useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { connect } from 'react-redux';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport * as SecureStore from 'expo-secure-store';\nimport Welcome from \"./screens/Welcome\";\nimport VideoScreen from \"./components/home/videos\";\nimport HomeScreen from \"./components/home/articles\";\nvar Drawer = createDrawerNavigator();\nvar Tab = createBottomTabNavigator();\nvar Stack = createStackNavigator();\n\nvar MyApp = function MyApp() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userInfo = _useState4[0],\n      setUserInfo = _useState4[1];\n\n  useEffect(function () {\n    var bootstrapAsync = function bootstrapAsync() {\n      var userInfo;\n      return _regeneratorRuntime.async(function bootstrapAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(SecureStore.getItemAsync(\"userInfo\"));\n\n            case 2:\n              userInfo = _context.sent;\n              userInfo ? setUserInfo(userInfo) : setUserInfo(null);\n              setIsLoading(false);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    bootstrapAsync();\n  }, []);\n\n  var _useState5 = useState(\"true\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      auth = _useState6[0],\n      setAuth = _useState6[1];\n\n  return React.createElement(NavigationContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, isLoading ? null : userInfo === null ? React.createElement(Stack.Navigator, {\n    initialRouteName: \"Welcome\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, React.createElement(Stack.Screen, {\n    name: \"Welcome\",\n    options: {\n      header: function header() {\n        return null;\n      },\n      animationEnabled: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, function () {\n    return React.createElement(Welcome, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 22\n      }\n    });\n  }), React.createElement(Stack.Screen, {\n    name: \"SignUp\",\n    options: {\n      header: function header() {\n        return null;\n      },\n      animationEnabled: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, function () {\n    return React.createElement(SignUpScreen, {\n      setId: setId,\n      setToken: setToken,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 22\n      }\n    });\n  }), React.createElement(Stack.Screen, {\n    name: \"SignIn\",\n    options: {\n      header: function header() {\n        return null;\n      },\n      animationEnabled: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, function () {\n    return React.createElement(SignInScreen, {\n      setId: setId,\n      setToken: setToken,\n      setName: setName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 22\n      }\n    });\n  })) : {});\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth\n  };\n};\n\nexport default connect(mapStateToProps)(MyApp);","map":{"version":3,"sources":["E:/reactproj/abc_medo1/frontend/src/MyApp.js"],"names":["React","Component","useState","useEffect","connect","NavigationContainer","createStackNavigator","createDrawerNavigator","createBottomTabNavigator","Ionicons","SecureStore","Welcome","VideoScreen","HomeScreen","Drawer","Tab","Stack","MyApp","isLoading","setIsLoading","userInfo","setUserInfo","bootstrapAsync","getItemAsync","auth","setAuth","header","animationEnabled","setId","setToken","setName","mapStateToProps","state"],"mappings":"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","sourcesContent":["//import 'react-native-gesture-handler';\r\nimport React, { Component, useState, useEffect } from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { connect } from 'react-redux';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { createDrawerNavigator } from '@react-navigation/drawer';\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport * as SecureStore from 'expo-secure-store';\r\n//import AuthScreen from './components/auth';\r\nimport Welcome from \"./screens/Welcome\";\r\n//import ProfileScreen from './components/user/profile/profile';\r\n//import { Stack, HomeStack, VideosStack, screenOptions } from './routes/stacks';\r\n\r\n\r\nimport VideoScreen from './components/home/videos';\r\nimport HomeScreen from './components/home/articles';\r\n\r\n\r\nconst Drawer = createDrawerNavigator();\r\nconst Tab = createBottomTabNavigator();\r\nconst Stack = createStackNavigator();\r\n/*\r\nconst MainDrawer = () => (\r\n    <Drawer.Navigator\r\n    >\r\n        <Drawer.Screen name=\"Home\" component={HomeStack}/>\r\n        <Drawer.Screen name=\"Videos\" component={VideosStack}/>\r\n   \r\n    </Drawer.Navigator>\r\n)\r\n*/\r\nconst MyApp = () => {\r\n\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n    const [userInfo, setUserInfo] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Fetch the token from storage then navigate to our appropriate place\r\n        const bootstrapAsync = async () => {\r\n          // We should also handle error for production apps\r\n          const userInfo = await SecureStore.getItemAsync(\"userInfo\");\r\n          //console.log(userInfo);\r\n          //const userToken = await SecureStore.getItemAsync(\"userToken\");\r\n          //const adminToken = await SecureStore.getItemAsync(\"adminToken\");\r\n    \r\n          // This will switch to the App screen or Auth screen and this loading\r\n          // screen will be unmounted and thrown away.\r\n          userInfo ? setUserInfo(userInfo):setUserInfo(null)\r\n          setIsLoading(false);\r\n        };\r\n    \r\n        bootstrapAsync();\r\n      }, []);\r\n   \r\n    const [auth, setAuth ] = useState(\"true\")\r\n\r\n        return (\r\n            <NavigationContainer>\r\n            { isLoading ? null : userInfo === null ? ( // We haven't finished checking for the token yet\r\n          // No token found, user isn't signed in\r\n          <Stack.Navigator initialRouteName=\"Welcome\">\r\n            <Stack.Screen\r\n              name=\"Welcome\"\r\n              options={{ header: () => null, animationEnabled: false }}\r\n            >\r\n              {() => <Welcome />}\r\n            </Stack.Screen>\r\n\r\n            <Stack.Screen\r\n              name=\"SignUp\"\r\n              options={{ header: () => null, animationEnabled: false }}\r\n            >\r\n              {() => <SignUpScreen setId={setId} setToken={setToken} />}\r\n            </Stack.Screen>\r\n            <Stack.Screen\r\n              name=\"SignIn\"\r\n              options={{ header: () => null, animationEnabled: false }}\r\n            >\r\n              {() => <SignInScreen setId={setId} setToken={setToken} setName={setName}/>}\r\n            </Stack.Screen>\r\n{/*\r\n            <Stack.Screen\r\n              name=\"AdminLogin\"\r\n              options={{ header: () => null, animationEnabled: false }}\r\n            >\r\n              {() => <AdminLogin setAdminId={setAdminId} setAdminToken={setAdminToken} />}\r\n            </Stack.Screen>\r\n            */}\r\n            {/*\r\n              adminToken !== null ? (\r\n                <Stack.Screen\r\n                  name=\"Tab\"\r\n                  options={{ header: () => null, animationEnabled: false }}\r\n                >\r\n                  {\r\n                    () => (\r\n                      <Tab.Navigator\r\n                      >\r\n                        <Tab.Screen\r\n                          name=\"Dashboard\"\r\n                          options={{ header: () => null, animationEnabled: false }}\r\n                        >\r\n                          {() => (\r\n                            <Stack.Navigator>\r\n                              <Stack.Screen\r\n                                name=\"Dashboard\"\r\n                                options={{ header: () => null, animationEnabled: false }}\r\n                              >\r\n                                {() => <Dashboard />}\r\n                              </Stack.Screen>\r\n                              <Stack.Screen\r\n                                name=\"YoutubeDownloader\"\r\n                                options={{ header: () => null, animationEnabled: false }}\r\n                              >\r\n                                {() => <YoutubeDownloader />}\r\n                              </Stack.Screen>\r\n                              <Stack.Screen\r\n                                name=\"Engineers\"\r\n                                options={{ header: () => null, animationEnabled: false }}\r\n                              >\r\n                                {() => <Engineers />}\r\n                              </Stack.Screen>\r\n                              <Stack.Screen\r\n                                name=\"EditEngineers\"\r\n                                options={{ header: () => null, animationEnabled: false }}\r\n                              >\r\n                                {() => <EditEngineers />}\r\n                              </Stack.Screen>\r\n                            </Stack.Navigator>\r\n                          )}\r\n                        </Tab.Screen>\r\n                        <Tab.Screen\r\n                          name=\"AdminProfile\"\r\n                          options={{ header: () => null, animationEnabled: false }}\r\n                        >\r\n                          {() => (\r\n                            <Stack.Navigator>\r\n                              <Stack.Screen\r\n                                name=\"AdminProfile\"\r\n                                options={{ header: () => null, animationEnabled: false }}\r\n                              >\r\n                                {() => <AdminProfile setAdminId={setadminId} setadminToken={setadminToken}/>}\r\n                              </Stack.Screen>\r\n                              <Stack.Screen\r\n                                name=\"Room\"\r\n                                options={{ header: () => null, animationEnabled: false }}\r\n                              >\r\n                                {() => <Room />}\r\n                              </Stack.Screen>\r\n                            </Stack.Navigator>\r\n                          )}\r\n                        </Tab.Screen>\r\n                      </Tab.Navigator>\r\n                    )\r\n                  }\r\n                </Stack.Screen>\r\n              ) : null\r\n                */}\r\n          </Stack.Navigator>\r\n        ) : (\r\n            // User is signed in\r\n{/*\r\n            <Stack.Navigator>\r\n              <Stack.Screen\r\n                name=\"Tab\"\r\n                options={{ header: () => null, animationEnabled: false }}\r\n              >\r\n                {() => (\r\n                  <Tab.Navigator\r\n                    tabBarOptions={{\r\n                      activeTintColor: \"black\",\r\n                      inactiveTintColor: \"white\",\r\n                      style: {\r\n                        backgroundColor: \"#F1485C\"\r\n                      }\r\n                    }}\r\n                  >\r\n                    <Tab.Screen\r\n                      name=\"YoutubeDownloader\"\r\n                      options={{\r\n                        tabBarLabel: \"YoutubeDownloader\",\r\n                        tabBarIcon: ({ color, size }) => (\r\n                          <Ionicons name={\"home\"} size={size} color={color} />\r\n                        )\r\n                      }}\r\n                    >\r\n                      {() => (\r\n                        <Stack.Navigator>\r\n                          <Stack.Screen\r\n                                name=\"FfmpegConverter\"\r\n                                options={{ header: () => null, animationEnabled: false }}\r\n                              >\r\n                                {() => <FfmpegConverter />}\r\n                          </Stack.Screen>\r\n                          \r\n                          <Stack.Screen\r\n                                name=\"YoutubeDownloader\"\r\n                                options={{ header: () => null, animationEnabled: false }}\r\n                              >\r\n                                {() => <YoutubeDownloader />}\r\n                          </Stack.Screen>\r\n                          <Stack.Screen\r\n                            name=\"Home\"\r\n                            options={{\r\n                              title: \"List\",\r\n                              tabBarLabel: \"Home\",\r\n                              headerStyle: { backgroundColor: \"#F1485C\" },\r\n                              headerTitleStyle: { color: \"white\" },\r\n                              headerTitleAlign: \"center\"\r\n                            }}\r\n                          >\r\n                            {() => <HomeScreen userId={userId} userToken={userToken} name={name}/>}\r\n                          </Stack.Screen>\r\n                        </Stack.Navigator>\r\n                      )}\r\n                    </Tab.Screen>\r\n                    <Tab.Screen\r\n                      name=\"HowToDownload\"\r\n                      options={{\r\n                        tabBarLabel: \"HowToDownload\",\r\n                        tabBarIcon: ({ color, size }) => (\r\n                          <Ionicons\r\n                            name={\"HowToDownload\"}\r\n                            size={size}\r\n                            color={color}\r\n                          />\r\n                        )\r\n                      }}\r\n                    >\r\n                      {() => (\r\n                        <Stack.Navigator>\r\n                          <Stack.Screen\r\n                            name=\"HowToDownload\"\r\n                            options={{\r\n                              title: \"HowToDownload\",\r\n                              headerStyle: { backgroundColor: \"#F1485C\" },\r\n                              headerTitleStyle: { color: \"white\" },\r\n                              headerTitleAlign: \"center\"\r\n                            }}\r\n                          >\r\n                            {() => (\r\n                              <HowToDownload setId={setId} setToken={setToken} setName={setname}/>\r\n                            )}\r\n                          </Stack.Screen>\r\n                        </Stack.Navigator>\r\n                      )}\r\n                    </Tab.Screen>\r\n                    <Tab.Screen\r\n                      name=\"Profile\"\r\n                      options={{\r\n                        tabBarLabel: \"Profile\",\r\n                        tabBarIcon: ({ color, size }) => (\r\n                          <Ionicons\r\n                            name={\"profile\"}\r\n                            size={size}\r\n                            color={color}\r\n                          />\r\n                        )\r\n                      }}\r\n                    >\r\n                      {() => (\r\n                        <Stack.Navigator>\r\n                          <Stack.Screen\r\n                            name=\"Profile\"\r\n                            options={{\r\n                              title: \"Profile\",\r\n                              headerStyle: { backgroundColor: \"#F1485C\" },\r\n                              headerTitleStyle: { color: \"white\" },\r\n                              headerTitleAlign: \"center\"\r\n                            }}\r\n                          >\r\n                            {() => (\r\n                              <ProfileScreen setId={setId} setToken={setToken} setName={setname}/>\r\n                            )}\r\n                          </Stack.Screen>\r\n                        </Stack.Navigator>\r\n                      )}\r\n                    </Tab.Screen>\r\n                  </Tab.Navigator>\r\n                )}\r\n              </Stack.Screen>\r\n            </Stack.Navigator>\r\n*/}\r\n          )}\r\n          </NavigationContainer>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = state => ({ auth: state.auth })\r\nexport default connect(mapStateToProps)(MyApp);\r\n\r\n"]},"metadata":{},"sourceType":"module"}